package dao;

import model.*;

import java.sql.*;
import java.time.*;
import java.util.ArrayList;
import java.util.List;

public class MeetingDAO {
	
//	FIELDS --------------------------------------------------------------------------------------------------------
    private final Connection conn;

//	CONSTRUCTOR ---------------------------------------------------------------------------------------------------
    public MeetingDAO(Connection conn) {
        this.conn = conn;
    }

// 	INSERT --------------------------------------------------------------------------------------------------------
    public void insert(Meeting meeting) throws SQLException {
        
//    	SQL query to insert into meetings table
    	String sql = "INSERT INTO meetings (meeting_id, club_id, title, date, time, location, description, recurrence) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        
//    	Prepare & execute statement
    	try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, meeting.getMeetingID());
            stmt.setString(2, meeting.getClubID());
            stmt.setString(3, meeting.getTitle());
            stmt.setDate(4, Date.valueOf(meeting.getDate()));
            stmt.setTime(5, (meeting.getTime() != null) ? Time.valueOf(meeting.getTime()) : null);
            stmt.setString(6, meeting.getLocation());
            stmt.setString(7, meeting.getDescription());
            stmt.setString(8, meeting.getFrequency().name());
            stmt.executeUpdate();
        }
    }

// 	GET BY ID -----------------------------------------------------------------------------------------------------
    public Meeting getById(String meetingId) throws SQLException {
        
//    	SQL query
    	String sql = "SELECT * FROM meetings WHERE meeting_id = ?";
    	
//    	Prepare statement
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            
//        	Filter
        	stmt.setString(1, meetingId);
        	
//        	Execute statement
            try (ResultSet rs = stmt.executeQuery()) {
            	
//            	Create new meeting from result statement to return
                if (rs.next()) {
                    return new Meeting(
                        rs.getString("title"),
                        rs.getDate("date").toLocalDate(),
                        rs.getTime("time") != null ? rs.getTime("time").toLocalTime() : null,
                        rs.getString("location"),
                        rs.getString("description"),
                        RecurrenceFrequency.valueOf(rs.getString("recurrence")),
                        rs.getString("club_id")
                    );
                }
            }
        }
//     	If no meetings
        return null;
    }
    
// 	GET ALL -------------------------------------------------------------------------------------------------------
    public List<Meeting> getAllByClub(String clubId) throws SQLException {
    	
//    	List of meetings
    	List<Meeting> meetings = new ArrayList<>();
        
//    	SQL query 
    	String sql = "SELECT * FROM meetings WHERE club_id = ?";

//    	Prepare statement
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        	
//        	Filter
            stmt.setString(1, clubId);
            
//         	Execute statement
            try (ResultSet rs = stmt.executeQuery()) {
            	
//            	Loop through results and record parameters
                while (rs.next()) {
                    String meetingID = rs.getString("meeting_id");
                    String title = rs.getString("title");
                    LocalDate date = LocalDate.parse(rs.getString("date")); // date stored as TEXT in ISO format
                    String timeStr = rs.getString("time");
                    LocalTime time = (timeStr != null && !timeStr.isEmpty()) ? LocalTime.parse(timeStr) : null;
                    String location = rs.getString("location");
                    String description = rs.getString("description");
                    String recurrenceStr = rs.getString("recurrence");
                    RecurrenceFrequency frequency = RecurrenceFrequency.valueOf(recurrenceStr); // assuming enum names match DB values

//                 	Create new meeting from parameters & add to list
                    Meeting meeting = new Meeting(title, date, time, location, description, frequency, clubId);
                    meeting.setMeetingID(meetingID);  // set the ID generated by DB
                    meetings.add(meeting);
                }
            }
        }
        return meetings;
    }
}
